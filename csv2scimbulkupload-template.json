{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {      
    "logicAppName": {
      "type": "string",
      "defaultValue": "Csv2ScimBulkUploadPoC",
      "metadata": {
        "description": "Logic App to read a CSV file from a file store (eg SPO) and convert the CSV to JSON to SCIM payload, and call the Entra SCIM API to provision users. After deploying the Logic App, you need to ad a SPO connection as a fist step in the workflow"
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "asia",
        "asiapacific",
        "australia",
        "australiacentral",
        "australiacentral2",
        "australiaeast",
        "australiasoutheast",
        "brazil",
        "brazilsouth",
        "brazilsoutheast",
        "canada",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "centraluseuap",
        "centralusstage",
        "chinaeast",
        "chinanorth",
        "eastasia",
        "eastasiastage",
        "eastus",
        "eastus2",
        "eastus2euap",
        "eastus2stage",
        "eastusstage",
        "europe",
        "francecentral",
        "francesouth",
        "germanycentral",
        "germanynorth",
        "germanynortheast",
        "germanywestcentral",
        "global",
        "india",
        "japan",
        "japaneast",
        "japanwest",
        "jioindiawest",
        "koreacentral",
        "koreasouth",
        "northcentralus",
        "northcentralusstage",
        "northeurope",
        "norwayeast",
        "norwaywest",
        "southafricanorth",
        "southafricawest",
        "southcentralus",
        "southcentralusstage",
        "southeastasia",
        "southeastasiastage",
        "southindia",
        "switzerland",
        "switzerlandnorth",
        "switzerlandwest",
        "uaecentral",
        "uaenorth",
        "uk",
        "uksouth",
        "ukwest",
        "unitedstates",
        "usdodeast",
        "usdodwest",
        "usgovarizona",
        "usgoviowa",
        "usgovtexas",
        "usgovvirginia",
        "usseceast",
        "ussecwest",
        "west",
        "westcentralus",
        "westeurope",
        "westindia",
        "westus",
        "westus2",
        "westus2stage",
        "westus3",
        "westusstage"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "Convert_CSV_to_JSON-URI": {
      "type": "string",
      "defaultValue": "https://fqdn-of-web-app-service/csvtojson",
      "metadata": {
        "description": "Enter the web service fqdn you previously deployed to convery CSV to JSON eg. webapp-newhirescsv.azurewebsites.net"
      }
    },
    "Send_SCIMBulkPayload_to_API_endpoint-URI": {
      "type": "string",
      "defaultValue": "https://graph.microsoft.com/v1.0/servicePrincipals/{servicePrincipalId}/synchronization/jobs/{jobId}/bulkUpload",
      "metadata": {
        "description": "Enter the Provisioning Graph API endpoint eg. https://graph.microsoft.com/v1.0/servicePrincipals/37ef8916-02ed-4123-bec2-ae25901964671/synchronization/jobs/API2AAD.d93ad6cee279420ebd3e3243b0c31b9c.92bed202-298d-43c5-af9a-eb5adb3a39d1/bulkUpload"
      } 
    },
    "Send_SCIMBulkPayload_to_API_endpoint-Audience": {
      "type": "string",
      "defaultValue": "https://graph.microsoft.com"
    },
    "RecurrenceFrequency": {
      "type": "string",
      "defaultValue": "Day"
    },
    "RecurrenceInterval": {
      "type": "int",
      "defaultValue": 5
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[parameters('logicAppLocation')]",
        "properties": {
            "definition": {
                "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                "contentVersion": "1.0.0.0",
                "triggers": {
                    "Recurrence": {
                        "recurrence": {
                            "frequency": "Day",
                            "interval": 5
                        },
                        "evaluatedRecurrence": {
                            "frequency": "Day",
                            "interval": 5
                        },
                        "type": "Recurrence"
                    }
                },
                "actions": {
                    "Get_File_Content_SPO": {
                            "runAfter": {},
                            "type": "Compose",
                            "inputs": "@toUpper('Add Action -Get File Content-SPO => newhire.csv  ... and set as Input here')"
                    },
                    "Get_CSV_records": {
                            "runAfter": {
                                "Get_File_Content_SPO": [
                                  "Succeeded"
                                ]    
                            },
                            "type": "Compose",
                            "inputs": "@body('Get_File_Content_SPO')"
                    },
                    "Convert_CSV_to_JSON": {
                        "runAfter": {
                            "Get_CSV_records": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http",
                        "inputs": {
                            "method": "POST",
                            "uri": "[parameters('Convert_CSV_to_JSON-URI')]",
                            "headers": {
                                "Content-Type": "text/csv"
                            },
                            "body": "@outputs('Get_CSV_records')"
                        }
                    },
                    "For_each": {
                        "foreach": "@variables('JSONInputArray')",
                        "actions": {
                            "Condition": {
                                "actions": {
                                    "Append_last_SCIMUser_record_in_the_chunk": {
                                        "type": "AppendToStringVariable",
                                        "inputs": {
                                            "name": "SCIMBulkPayload",
                                            "value": "@outputs('Construct_SCIMUser')"
                                        }
                                    },
                                    "Finalize_SCIMBulkPayload": {
                                        "runAfter": {
                                            "Append_last_SCIMUser_record_in_the_chunk": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "AppendToStringVariable",
                                        "inputs": {
                                            "name": "SCIMBulkPayload",
                                            "value": "  ],\n  \"failOnErrors\": null\n}"
                                        }
                                    },
                                    "Prepare_next_chunk_of_SCIMBulkPayload": {
                                        "runAfter": {
                                            "Reset_Iteration_Count": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "SCIMBulkPayload",
                                            "value": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n  ],\n  \"Operations\": ["
                                        }
                                    },
                                    "Reset_Iteration_Count": {
                                        "runAfter": {
                                            "Send_SCIMBulkPayload_to_API_endpoint": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "IterationCount",
                                            "value": 0
                                        }
                                    },
                                    "Send_SCIMBulkPayload_to_API_endpoint": {
                                        "runAfter": {
                                            "View_SCIMBulkPayload": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Http",
                                        "inputs": {
                                            "uri": "[parameters('Send_SCIMBulkPayload_to_API_endpoint-URI')]",
                                            "method": "POST",
                                            "headers": {
                                                "Content-Type": "application/scim+json"
                                            },
                                            "body": "@variables('SCIMBulkPayload')",
                                            "authentication": {
                                                "type": "ManagedServiceIdentity",
                                                "audience": "https://graph.microsoft.com"
                                            }
                                        },
                                        "operationOptions": "DisableAsyncPattern"
                                    },
                                    "View_SCIMBulkPayload": {
                                        "runAfter": {
                                            "Finalize_SCIMBulkPayload": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Compose",
                                        "inputs": "@variables('SCIMBulkPayload')"
                                    }
                                },
                                "runAfter": {
                                    "Construct_SCIMUser": [
                                        "Succeeded"
                                    ]
                                },
                                "else": {
                                    "actions": {
                                        "Append_SCIMUser_record": {
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "SCIMBulkPayload",
                                                "value": "@concat(outputs('Construct_SCIMUser'),',')"
                                            }
                                        }
                                    }
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "equals": [
                                                "@variables('IterationCount')",
                                                50
                                            ]
                                        },
                                        {
                                            "equals": [
                                                "@variables('NumberOfRecordsToProcess')",
                                                0
                                            ]
                                        }
                                    ]
                                },
                                "type": "If"
                            },
                            "Construct_SCIMUser": {
                                "runAfter": {
                                    "Decrement_NumberOfRecordsToProcess": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Compose",
                                "inputs": {
                                    "bulkId": "@{guid()}",
                                    "method": "POST",
                                    "path": "/Users",
                                    "data": {
                                        "schemas": [
                                            "urn:ietf:params:scim:schemas:core:2.0:User",
                                            "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
                                            "urn:ietf:params:scim:schemas:extension:csv:1.0:User"
                                        ],
                                        "Id": "@{items('For_each')?['EmployeeNumber']}",
                                        "externalId": "@{items('For_each')?['EmployeeNumber']}",
                                        "active": "@if(equals(items('For_each')?['AccountEnabled'],'TRUE'),true,false)",
                                        "displayName": "@{concat(items('For_each')?['FirstName'],' ',items('For_each')?['LastName'])}",
                                        "name": {
                                            "familyName": "@{items('For_each')?['LastName']}",
                                            "middleName": "@{items('For_each')?['MiddleName']}",
                                            "givenName": "@{items('For_each')?['FirstName']}",
                                            "honorificPrefix": "@{items('For_each')?['NamePrefix']}"
                                        },
                                        "userName": "@{concat(items('For_each')?['AliasUserID'],'@',items('For_each')?['DomainName'])}",
                                        "userType": "@{items('For_each')?['WorkerType']}",
                                        "phoneNumbers": [
                                            {
                                                "type": "mobile",
                                                "value": "@{items('For_each')?['MobileNumber']}"
                                            }
                                        ],
                                        "title": "@{items('For_each')?['JobTitle']}",
                                        "addresses": [
                                            {
                                                "type": "work",
                                                "streetAddress": "@{concat(items('For_each')?['AddressLine1'],' \n',items('For_each')?['AddressLine2'])}",
                                                "locality": "@{items('For_each')?['City']}",
                                                "region": "@{items('For_each')?['Region']}",
                                                "postalCode": "@{items('For_each')?['PostalCode']}",
                                                "country": "@{items('For_each')?['Country']}",
                                                "primary": true
                                            }
                                        ],
                                        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                                            "organization": "@{items('For_each')?['Company']}",
                                            "costCenter": "@{items('For_each')?['CostCenter']}",
                                            "department": "@{items('For_each')?['Department']}",
                                            "division": "@{items('For_each')?['Division']}",
                                            "employeeNumber": "@{items('For_each')?['EmployeeNumber']}",
                                            "manager": {
                                                "value": "@{items('For_each')?['ManagerEmployeeNumber']}",
                                                "displayName": "@{items('For_each')?['ManagerDisplayName']}"
                                            }
                                        },
                                        "urn:ietf:params:scim:schemas:extension:csv:1.0:User": {
                                            "GenderPronoun": "@{items('For_each')?['GenderPronoun']}",
                                            "HireDate": "@{concat(items('For_each')?['HireDate'],items('For_each')?['GMToffset'])}",
                                            "JobCode": "@{items('For_each')?['JobCode']}",
                                            "Location": "@{items('For_each')?['CountryReferenceTwoLetter']}",
                                            "DomainName": "@{items('For_each')?['DomainName']}"
                                        }
                                    }
                                }
                            },
                            "Increment_IterationCount": {
                                "type": "IncrementVariable",
                                "inputs": {
                                    "name": "IterationCount",
                                    "value": 1
                                }
                            },
                            "Decrement_NumberOfRecordsToProcess": {
                                "runAfter": {
                                    "Increment_IterationCount": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "DecrementVariable",
                                "inputs": {
                                    "name": "NumberOfRecordsToProcess",
                                    "value": 1
                                }
                            }
                        },
                        "runAfter": {
                            "Initialize_InvocationDateTime": [
                                "Succeeded"
                            ]
                        },
                        "type": "Foreach",
                        "runtimeConfiguration": {
                            "concurrency": {
                                "repetitions": 1
                            }
                        }
                    },
                    "Initialize_InvocationDateTime": {
                        "runAfter": {
                            "Initialize_SCIMBulkPayload": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "InvocationDateTime",
                                    "type": "string",
                                    "value": "@{utcNow()}"
                                }
                            ]
                        }
                    },
                    "Initialize_IterationCount": {
                        "runAfter": {
                            "Initialize_NumberOfRecordsToProcess": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "IterationCount",
                                    "type": "integer",
                                    "value": 1
                                }
                            ]
                        }
                    },
                    "Initialize_JSONInputArray": {
                        "runAfter": {
                            "Parse_JSON": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "JSONInputArray",
                                    "type": "array",
                                    "value": "@body('Parse_JSON')?['rows']"
                                }
                            ]
                        }
                    },
                    "Initialize_NumberOfRecordsToProcess": {
                        "runAfter": {
                            "Initialize_JSONInputArray": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "NumberOfRecordsToProcess",
                                    "type": "integer",
                                    "value": "@length(body('Parse_JSON')?['rows'])"
                                }
                            ]
                        }
                    },
                    "Initialize_SCIMBulkPayload": {
                        "runAfter": {
                            "Initialize_IterationCount": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "SCIMBulkPayload",
                                    "type": "string",
                                    "value": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n  ],\n  \"Operations\": [\n"
                                }
                            ]
                        }
                    },
                    "Parse_JSON": {
                        "runAfter": {
                            "Convert_CSV_to_JSON": [
                                "Succeeded"
                            ]
                        },
                        "type": "ParseJson",
                        "inputs": {
                            "content": "@body('Convert_CSV_to_JSON')",
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "rows": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "EmployeeNumber": {
                                                    "type": "string"
                                                },
                                                "AccountEnabled": {
                                                    "type": "string"
                                                },
                                                "WorkerType": {
                                                    "type": "string"
                                                },
                                                "FirstName": {
                                                    "type": "string"
                                                },
                                                "MiddleName": {
                                                    "type": "string"
                                                },
                                                "LastName": {
                                                    "type": "string"
                                                },
                                                "FullName": {
                                                    "type": "string"
                                                },
                                                "NamePrefix": {
                                                    "type": "string"
                                                },
                                                "GenderPronoun": {
                                                    "type": "string"
                                                },
                                                "AliasUserID": {
                                                    "type": "string"
                                                },
                                                "DomainName": {
                                                    "type": "string"
                                                },
                                                "HireDate": {
                                                    "type": "string"
                                                },
                                                "Department": {
                                                    "type": "string"
                                                },
                                                "Division": {
                                                    "type": "string"
                                                },
                                                "CostCenter": {
                                                    "type": "string"
                                                },
                                                "Company": {
                                                    "type": "string"
                                                },
                                                "JobTitle": {
                                                    "type": "string"
                                                },
                                                "JobCode": {
                                                    "type": "string"
                                                },
                                                "AddressLine1": {
                                                    "type": "string"
                                                },
                                                "AddressLine2": {
                                                    "type": "string"
                                                },
                                                "City": {
                                                    "type": "string"
                                                },
                                                "Region": {
                                                    "type": "string"
                                                },
                                                "PostalCode": {
                                                    "type": "string"
                                                },
                                                "Country": {
                                                    "type": "string"
                                                },
                                                "CountryReferenceTwoLetter": {
                                                    "type": "string"
                                                },
                                                "GMToffset": {
                                                    "type": "string"
                                                },
                                                "MobilePhone": {
                                                    "type": "string"
                                                },
                                                "Custom01": {
                                                    "type": "string"
                                                },
                                                "ManagerEmployeeNumber": {
                                                    "type": "string"
                                                },
                                                "ManagerDisplayName": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "EmployeeNumber",
                                                "AccountEnabled",
                                                "FirstName",
                                                "LastName",
                                                "AliasUserID",
                                                "CountryReferenceTwoLetter"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "outputs": {},
                "parameters": {
                    "$connections": {
                        "type": "Object",
                        "defaultValue": {}
                    }
                }
            }
        },
      "identity": {
        "type": "SystemAssigned"
      }
    }
  ],
  "outputs": {}
}
